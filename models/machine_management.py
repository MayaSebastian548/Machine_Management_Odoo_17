# -*- coding; utf-8 -*-
from datetime import datetime, date
from odoo import api, fields, models
from odoo.exceptions import UserError, ValidationError
"""Model Creation"""


class MachineManagement(models.Model):
    """Machine Model table name in database"""
    _name = "machine.management"
    _description = "Machine Management"
    _inherit = 'mail.thread'
    _order = "sequence_no DESC"
    _sql_constraints = [('serial_no_uniq', 'unique (serial_no)',
                         "The Serial Number must be unique, this one is already assigned to another machine.")]

    """Machine model fields"""
    name = fields.Char(string="Name", required=True, help="Name of the Machine", tracking=True)
    serial_no = fields.Integer(string="Serial Number", help=" Unique Serial number of Machine")
    sequence_no = fields.Char(string="Sequence Number", copy=False, readonly=False, index=True,
                              default=lambda self: 'New', help="Autogenerated sequence number for machine")
    date_of_purchase = fields.Date(string="Date of Purchase", help="Purchase Date of the Machines",
                                   default=date.today())
    purchase_value = fields.Monetary(string="Purchase Value", help="Cost of Machine", tracking=True)
    customer_id = fields.Many2one(string="Customer", comodel_name="res.partner", readonly=True,
                                  help="Name of the customer")
    state = fields.Selection(string="State of machine",
                             selection=[('active', 'Active'), ('inservice', 'In Service')], default="active",
                             help="State of machine. That is currently active or in service", tracking=True)
    image = fields.Image(help="Image of the Machine", required=True)
    description = fields.Text(string="Description", help="Description about the Machine")
    warranty = fields.Selection(
        selection=[('yes', 'Yes'), ('no', 'No')], string="Warranty",
        help="A guarantee issued by a seller to a buyer that a Machine will meet certain specifications",
        tracking=True)
    machine_instructions = fields.Html(string="Instructions", help="Instructions about the operation of Machine")
    company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.company,
                                 readonly=True, help="Name of the Company")
    currency_id = fields.Many2one('res.currency', related='company_id.currency_id', default=lambda
                                  self: self.env.user.company_id.currency_id.id,
                                  string="Currency", help="Currency Symbol")
    transfer_count = fields.Integer(string="Transfer Count", compute='_compute_transfer_count',
                                    help="Count of transfers")
    service_count = fields.Integer(string="Service Count", compute='_compute_service_count',
                                   help="Count of services")
    machine_types_id = fields.Many2one(string="Machine Type", comodel_name="machine.type", help="Type of machines")
    machine_tags_ids = fields.Many2many(string="Tags", comodel_name="machine.tags", help="Tags related to the machine")
    machine_parts_ids = fields.One2many(comodel_name="machine.parts", inverse_name="parts_id",
                                        string="Machine Parts", help="Products for the machine")
    machine_age = fields.Integer(string="Machine's Age", compute="_compute_age",
                                 help="Machine's Age in days")
    active = fields.Boolean(string="Active", default=True)
    service_frequency = fields.Selection(
        selection=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')],
        help="Service frequency for the machine", string="Service Frequency")
    last_service_date = fields.Date(string="Last Service Date", help="Date of Last service", readonly=True)
    hide = fields.Boolean(string='Hide', help="Boolean field for hide the warning")
    alert_msg = fields.Char(readonly=True, string="Alert Message", help="Alert message for machine")

    def action_archive(self):
        """Archive the machines and its transfers"""
        for rec in self:
            if rec.state == 'active':
                res = super().action_archive()
                rec.env['machine.transfer'].search([('machine_id', 'in', rec.ids)]).write({'active': False})
                service = rec.env['machine.service'].search_count([('machines_id', 'in', rec.ids),
                                                                   ('service_state', '=', ['open', 'started'])])
                if service:
                    rec.write({'alert_msg': "There is open services",
                               'hide': True})
                    rec.env['machine.service'].search([('machines_id', 'in', rec.ids),
                                                       ('service_state', '=', ['open', 'started'])]).write(
                        {'service_state': 'cancel'})
                return res
            raise UserError("The machine is in In Service state")

    def action_unarchive(self):
        """Unarchived the machine and its transfers"""
        for rec in self:
            res = super().action_unarchive()
            (self.env['machine.transfer'].sudo().search([('machine_id', 'in', rec.ids), ('active', '=', False)])
             .write({'active': True}))
            self.env['machine.service'].write({'service_state': 'open'})
            rec.write({'alert_msg': "",
                       'hide': False})
            return res

    def _compute_age(self):
        """Function For Calculating the Machine Age"""
        for rec in self:
            rec.machine_age = 0
            today = date.today()
            if rec.date_of_purchase and today:
                start = datetime.strptime(str(rec.date_of_purchase),
                                          "%Y-%m-%d").date()
                end = datetime.strptime(str(today),
                                        "%Y-%m-%d").date()
                age = (end - start).days
                rec.machine_age = age

    def _compute_transfer_count(self):
        """count of machine transfers"""
        for rec in self:
            rec.transfer_count = self.env['machine.transfer'].search_count([('machine_serial_no', '=', rec.serial_no)])

    def show_history(self):
        """History of machine transfers"""
        return {
            'type': 'ir.actions.act_window',
            'name': 'Machine Transfer',
            'res_model': 'machine.transfer',
            'domain': [('machine_serial_no', '=', self.serial_no)],
            'view_mode': 'tree,form',
            'target': 'current',
        }

    def _compute_service_count(self):
        """count of machine services"""
        for rec in self:
            rec.service_count = self.env['machine.service'].search_count([('machine_serial_no', '=', rec.serial_no),
                                                                          ('service_state', 'in', ['open', 'started'])])

    def service_history(self):
        """History of machine services"""
        return {
            'type': 'ir.actions.act_window',
            'name': 'Machine Service',
            'res_model': 'machine.service',
            'domain': [('machine_serial_no', '=', self.serial_no)],
            'view_mode': 'tree,form',
            'target': 'current',
        }

    @api.constrains('purchase_value')
    def purchase_check(self):
        """Validation of purchase value"""
        for rec in self:
            if rec.purchase_value == 0:
                raise ValidationError("Purchase value cannot be zero")

    @api.model
    def create(self, vals_list):
        """sequence creation"""
        if vals_list.get('sequence_no', 'New') == 'New':
            vals_list['sequence_no'] = self.env['ir.sequence'].next_by_code('machine.management.code')
            result = super(MachineManagement, self).create(vals_list)
            return result

    def action_transfer(self):
        """Transfer button in machine management"""
        return {
            'type': 'ir.actions.act_window',
            'name': 'Machine Transfer',
            'res_model': 'machine.transfer',
            'domain': [('machine_serial_no', '=', self.serial_no)],
            'context': {'default_machine_id': self.id, 'default_company_id': self.company_id.id},
            'view_mode': 'form',
            'target': 'current',
        }

    def action_services_btn(self):
        """Service button in machine management"""
        service_count = self.env['machine.service'].search_count([('machines_id', '=', self.id),
                                                                  ('service_state', '=', ['open', 'started']),
                                                                  ('company_id', '=', self.env.company.id)])
        if service_count < 1:
            service = self.env['machine.service'].create({
                'machines_id': self.id,
                'machine_serial_no': self.serial_no,
                'company_id': self.env.company.id,
            })
            return {
                'type': 'ir.actions.act_window',
                'name': 'Machine Service',
                'res_model': 'machine.service',
                'res_id': service.id,
                'view_mode': 'form',
                'target': 'current',
            }
        else:
            raise UserError("There is an open or started service")

    def action_service(self):
        service_data_search = self.search([('state', '=', 'inservice')])
        for rec in service_data_search:
            service_count = self.env['machine.service'].search_count([('machines_id', '=', self.id),
                                                                      ('service_state', '=', ['open', 'started'])])
            if service_count < 1:
                self.env['machine.service'].create({
                    'machines_id': rec.id,
                    'machine_serial_no': rec.serial_no,
                    'parts_consumed_ids': rec.machine_parts_ids.ids
                })


class MachineParts(models.Model):
    """Machine parts Model table name in database"""
    _name = "machine.parts"
    _description = "Machine Parts"

    product_ids = fields.Many2many(comodel_name="product.product",
                                   compute="_compute_product")
    parts_id = fields.Many2one(comodel_name="machine.management")
    machine_parts_id = fields.Many2one(string="Machine Parts", comodel_name="product.product")
    parts_quantity = fields.Float(string="Quantity", default="1")
    parts_uom_id = fields.Many2one(string="UOM", related="machine_parts_id.uom_id")
    parts_price = fields.Float(string="Price", related="machine_parts_id.lst_price")
    service_id = fields.Many2one(comodel_name="machine.service")

    @api.depends('service_id')
    def _compute_product(self):
        """products to service as dropdown"""
        for rec in self:
            rec.product_ids = False
            if rec.service_id:
                products = rec.service_id.machines_id.machine_parts_ids.machine_parts_id.ids
                choose = rec.service_id.parts_consumed_ids.machine_parts_id.ids
                res = [i for i in products if i not in choose]
                rec.product_ids = [fields.Command.set(res)]
